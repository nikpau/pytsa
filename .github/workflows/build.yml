name: Build and Publish

on: [push, pull_request]

jobs:
    build:
      name: build on ${{ matrix.os }} (${{ matrix.target }} - ${{ matrix.interpreter || 'all' }}${{ matrix.os == 'linux' && format(' - {0}', matrix.manylinux == 'auto' && 'manylinux' || matrix.manylinux) || '' }})
      # only run on push to main and on release
      strategy:
        fail-fast: false
        matrix:
          os: [linux, macos, windows]
          target: [x86_64, aarch64]
          manylinux: [auto]
          include:
            # manylinux for various platforms
            - os: linux
              manylinux: auto
              target: i686
            - os: linux
              manylinux: auto
              target: aarch64
            - os: linux
              manylinux: auto
              target: armv7
              interpreter: 3.10 3.11 3.12 3.13
            - os: linux
              manylinux: auto
              target: ppc64le
              interpreter: 3.10 3.11 3.12 3.13
            - os: linux
              manylinux: auto
              target: s390x
              interpreter: 3.10 3.11 3.12 3.13
  
            # musllinux
            - os: linux
              manylinux: musllinux_1_1
              target: x86_64
            - os: linux
              manylinux: musllinux_1_1
              target: aarch64
            - os: linux
              manylinux: musllinux_1_1
              target: armv7

            # windows;
            # aarch64 is not supported on windows
            - os: windows
              target: i686
              python-architecture: x86
              interpreter: 3.10 3.11 3.12 3.13

          exclude:
            - os: windows
              target: aarch64
  
      runs-on: ${{ (matrix.os == 'linux' && 'ubuntu') || matrix.os }}-latest
      steps:
        - uses: actions/checkout@v4

        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: "3.13"
            architecture: ${{ matrix.python-architecture || 'x64' }}
  
        - name: build wheels
          uses: PyO3/maturin-action@v1
          with:
            target: ${{ matrix.target }}
            manylinux: ${{ matrix.manylinux }}
            args: --release --interpreter ${{ matrix.interpreter || '3.10 3.11 3.12 3.13' }}
            rust-toolchain: ${{ (matrix.os == 'windows' && '1.77') || 'stable' }}
            docker-options: -e CI

        - name: Upload Wheels
          uses: actions/upload-artifact@v4
          with:
            name: wheels-${{ strategy.job-index }}
            path: target/wheels/
          
    publish-to-pypi:
      name: >-
          Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
      needs:
      - build
      runs-on: ubuntu-latest
      environment:
        name: pypi
        url: https://pypi.org/p/pytsa-ais
      permissions:
        id-token: write  # IMPORTANT: mandatory for trusted publishing

      steps:
        - name: Download all the dists
          uses: actions/download-artifact@v4
          with:
            name: wheels-*
            path: target/wheels/
        - name: Publish distribution to PyPI
          uses: pypa/gh-action-pypi-publish@release/v1
          with:
            packages-dir: target/wheels/
          
    github-release:
      name: >-
        Sign the distribution with Sigstore
        and upload them as GitHub Release
      needs:
      - publish-to-pypi
      runs-on: ubuntu-latest

      permissions:
        contents: write
        id-token: write

      steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: wheels-*
          path: target/wheels/
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `target/wheels/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          '${{ github.ref_name }}' target/wheels/**
          --repo '${{ github.repository }}'
